name: build-macos-aarch64
on:
  issue_comment:
    types: [created]

concurrency:
  group: build-macos-aarch64-${{ github.event.issue.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-permissions:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '!build')
    runs-on: ubuntu-latest
    outputs:
      has-permission: ${{ steps.check.outputs.has-permission }}
      pr-head-sha: ${{ steps.get-pr-info.outputs.head-sha }}
      pr-head-ref: ${{ steps.get-pr-info.outputs.head-ref }}
      comment-id: ${{ steps.create-comment.outputs.comment-id }}
      is-build-command: ${{ steps.check-command.outputs.is-build-command }}
    steps:
      - name: Check if comment is exactly !build
        id: check-command
        uses: actions/github-script@v8
        with:
          script: |
            const commentBody = context.payload.comment.body.trim();
            const isBuildCommand = commentBody === '!build';
            console.log(`Comment body (trimmed): "${commentBody}"`);
            console.log(`Is build command: ${isBuildCommand}`);
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `is-build-command=${isBuildCommand}\n`);

      - name: Get PR information
        if: steps.check-command.outputs.is-build-command == 'true'
        id: get-pr-info
        uses: actions/github-script@v8
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `head-sha=${pr.head.sha}\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `head-ref=${pr.head.ref}\n`);

      - name: Check if user has write permission
        if: steps.check-command.outputs.is-build-command == 'true'
        id: check
        uses: actions/github-script@v8
        with:
          script: |
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              const hasPermission = ['admin', 'maintain', 'write'].includes(permission.permission);
              console.log(`User ${context.actor} has ${permission.permission} access`);
              console.log(`Has required permission: ${hasPermission}`);
              const fs = require('fs');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `has-permission=${hasPermission}\n`);
            } catch (error) {
              console.log(`Error checking permissions for ${context.actor}: ${error.message}`);
              const fs = require('fs');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `has-permission=false\n`);
            }

      - name: Create initial status comment
        id: create-comment
        if: steps.check-command.outputs.is-build-command == 'true' && steps.check.outputs.has-permission == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üîÑ Building Neovim for macOS aarch64 (commit: `${{ steps.get-pr-info.outputs.head-sha }}`)...\n\nPlatform: macOS arm64 (aarch64)\nRetention: 7 days\nTriggered by: ' + context.actor
            });
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `comment-id=${comment.id}\n`);

  build-macos-aarch64:
    needs: check-permissions
    if: needs.check-permissions.outputs.is-build-command == 'true' && needs.check-permissions.outputs.has-permission == 'true'
    runs-on: macos-14
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ needs.check-permissions.outputs.pr-head-sha }}
          fetch-depth: 0

      - name: Install dependencies
        run: ./.github/scripts/install_deps.sh

      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build .deps

      - name: Build neovim
        run: |
          cmake -B build -G Ninja \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
            -D ENABLE_LIBINTL=OFF \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build build

      - name: Package
        run: cpack --config build/CPackConfig.cmake

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nvim-macos-arm64
          path: build/nvim-macos-arm64.tar.gz
          retention-days: 7

      - name: Update comment on success
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-permissions.outputs.comment-id }},
              body: '‚úÖ macOS aarch64 build completed successfully!\n\nCommit: `${{ needs.check-permissions.outputs.pr-head-sha }}`\nDownload: [Workflow run artifacts](' + artifactUrl + ')\nRetention: 7 days'
            });

      - name: Update comment on failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-permissions.outputs.comment-id }},
              body: '‚ùå macOS aarch64 build failed.\n\nCommit: `${{ needs.check-permissions.outputs.pr-head-sha }}`\nLogs: [View workflow run](' + runUrl + ')'
            });
