name: build-macos-aarch64
on:
  issue_comment:
    types: [created]
  workflow_dispatch:

concurrency:
  group: build-macos-aarch64-${{ github.event_name == 'issue_comment' && github.event.issue.number || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-permissions:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      comment-id: ${{ steps.check.outputs.comment-id }}
    steps:
      - name: Check comment and permissions
        id: check
        uses: actions/github-script@v8
        with:
          script: |
            const commentBody = context.payload.comment.body.trim();
            if (commentBody !== '!build') {
              console.log('Comment is not "!build", skipping.');
              return;
            }

            let hasPermission = false;
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              hasPermission = ['admin', 'maintain', 'write'].includes(permission.permission);
              console.log(`User ${context.actor} has ${permission.permission} access`);
            } catch (error) {
              console.log(`Error checking permissions for ${context.actor}: ${error.message}`);
            }

            if (!hasPermission) {
              console.log('User does not have permission, skipping.');
              return;
            }

            console.log('User has permission. Creating comment and triggering build.');

            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'üîÑ Building Neovim for macOS aarch64 (commit: `latest master`)...\n\nPlatform: macOS arm64 (aarch64)\nRetention: 7 days\nTriggered by: ' + context.actor
            });

            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_build=true\n`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `comment-id=${comment.id}\n`);

  build-macos-aarch64:
    needs: check-permissions
    if: |
      always() && (
        github.event_name == 'workflow_dispatch' ||
        needs.check-permissions.outputs.should_build == 'true'
      )
    runs-on: macos-14
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'issue_comment' && 'master' || github.ref }}
          fetch-depth: 0

      - name: Get commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: ./.github/scripts/install_deps.sh

      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build .deps

      - name: Build neovim
        run: |
          cmake -B build -G Ninja \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
            -D ENABLE_LIBINTL=OFF \
            -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build build

      - name: Package
        run: cpack --config build/CPackConfig.cmake

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nvim-macos-arm64
          path: build/nvim-macos-arm64.tar.gz
          retention-days: 7

      - name: Update comment on success
        if: success() && github.event_name == 'issue_comment'
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-permissions.outputs.comment-id }},
              body: '‚úÖ macOS aarch64 build completed successfully!\n\nCommit: `${{ steps.get-sha.outputs.sha }}`\nDownload: [Workflow run artifacts](' + artifactUrl + ')\nRetention: 7 days'
            });

      - name: Update comment on failure
        if: failure() && github.event_name == 'issue_comment'
        uses: actions/github-script@v8
        with:
          script: |
            const runId = context.runId;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.check-permissions.outputs.comment-id }},
              body: '‚ùå macOS aarch64 build failed.\n\nCommit: `${{ steps.get-sha.outputs.sha }}`\nLogs: [View workflow run](' + runUrl + ')'
            });
